name: Notify Branch Owners

on: push

jobs:
  notify-branch-owners:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Get all branches and default branch
        id: get_branches
        run: |
          # Fetch all branches
          git fetch --all
          
          # Get all remote branches and trim leading/trailing spaces
          branches=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | grep -v 'HEAD$' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "DEBUG: All branches:"
          echo "$branches"
          
          # Store branches in a file
          echo "$branches" > all_branches.txt
          
          # Set output for number of branches
          branch_count=$(echo "$branches" | wc -l)
          echo "branch_count=$branch_count" >> $GITHUB_OUTPUT
          
          # Determine default branch
          default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "DEBUG: Default branch: $default_branch"
          echo "default_branch=$default_branch" >> $GITHUB_OUTPUT

      - name: Test API Access
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "Testing API access..."
          echo "REPO: $REPO"
          api_url="https://api.github.com/repos/${REPO}/pulls?state=all"
          echo "API URL: $api_url"
          response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${GITHUB_TOKEN}" "$api_url")
          body=$(echo "$response" | sed '$d')
          status_code=$(echo "$response" | tail -n1)
          echo "API Response (Status Code: $status_code):"
          echo "$body"

      - name: Check branches and prepare notifications
        id: prepare_notifications
        env:
          DEFAULT_BRANCH: ${{ steps.get_branches.outputs.default_branch }}
          BRANCH_COUNT: ${{ steps.get_branches.outputs.branch_count }}
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "DEBUG: Number of branches: $BRANCH_COUNT"
          echo "DEBUG: Content of all_branches.txt:"
          cat all_branches.txt
          
          # Function to trim leading and trailing spaces
          trim() {
            local var="$*"
            var="${var#"${var%%[![:space:]]*}"}"
            var="${var%"${var##*[![:space:]]}"}"   
            echo -n "$var"
          }
          
          # Function to safely extract email
          safe_extract_email() {
            local raw_email="$1"
            echo "$raw_email" | grep -oE '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b' | head -n 1
          }
          
          # Function to check PR status using GitHub API
          check_pr_status() {
            local branch="$1"            
            local api_url="https://api.github.com/repos/${REPO}/pulls?head=${REPO%/*}:${branch}&state=all"
            echo "DEBUG: API URL for $branch: $api_url"
            local response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${GITHUB_TOKEN}" "$api_url")
            local body=$(echo "$response" | sed '$d')
            local status_code=$(echo "$response" | tail -n1)
          
            echo "DEBUG: API Response for $branch (Status Code: $status_code): $body"
          
            if [[ "$status_code" == "200" ]]; then
              if echo "$body" | jq -e '. | length > 0' > /dev/null; then
                local state=$(echo "$body" | jq -r '.[0].state')
                local merged=$(echo "$body" | jq -r '.[0].merged')
                if [[ "$state" == "open" ]]; then
                  echo "OPEN"
                elif [[ "$merged" == "true" ]]; then
                  echo "MERGED"
                else
                  echo "CLOSED"
                fi
              else
                echo "NO_PR"
              fi
            elif [[ "$status_code" == "404" ]]; then
              echo "NOT_FOUND"
            else
              echo "API_ERROR"
            fi
          }
          
          notifications=()
          echo "DEBUG: Starting branch processing"
          echo "DEBUG: Default branch is $DEFAULT_BRANCH"
          while IFS= read -r full_branch_name; do
            full_branch_name=$(trim "$full_branch_name")
            if [[ -z "$full_branch_name" ]]; then
              echo "DEBUG: Empty branch name, skipping"
              continue
            fi
          
            branch=${full_branch_name#origin/}
            echo "DEBUG: Processing branch: $branch (full name: $full_branch_name)"
          
            if [[ "$branch" == "$DEFAULT_BRANCH" ]]; then
              echo "DEBUG: Skipping default branch $branch"
              continue
            fi
          
            first_commit=$(git rev-list --max-parents=0 "$full_branch_name" 2>/dev/null || echo "")
            if [[ -z "$first_commit" ]]; then
              echo "DEBUG: No commits found for branch $branch, skipping"
              continue
            fi
          
            first_commit_date=$(git show -s --format=%ci "$first_commit")
            echo "DEBUG: First commit date for branch $branch: $first_commit_date"
          
            # Check PR status
            pr_status=$(check_pr_status "$branch")
            echo "DEBUG: PR status for branch $branch: $pr_status"
          
            if [[ "$pr_status" == "MERGED" ]]; then
              is_merged="true"
            else
              is_merged="false"
            fi
          
            # Safely get branch owner's email and name
            raw_email=$(git log -1 --format='%ae' "$full_branch_name")
            owner_email=$(safe_extract_email "$raw_email")
            owner_name=$(git log -1 --format='%an' "$full_branch_name")
            echo "DEBUG: Branch owner for $branch: $owner_name (email safely extracted)"
          
            days_diff=$(( ( $(date +%s) - $(date +%s -d "$first_commit_date") )/(60*60*24) ))
            echo "DEBUG: Days since first commit: $days_diff"

            if [[ "$is_merged" == "false" && "$days_diff" -ge 2 ]]; then
              if [[ "$pr_status" == "OPEN" ]]; then
                message="Branch $branch has an open PR that has not been merged into $DEFAULT_BRANCH, and the first commit is older than 10 days. Please review and consider merging or closing the PR."
              elif [[ "$pr_status" == "CLOSED" ]]; then
                message="Branch $branch had a PR that was closed without merging into $DEFAULT_BRANCH. The first commit is older than 10 days. Please review and consider reopening the PR, creating a new PR, or deleting this branch."
              elif [[ "$pr_status" == "NOT_FOUND" || "$pr_status" == "NO_PR" ]]; then
                message="Branch $branch has not been merged into $DEFAULT_BRANCH and has no open PR. The first commit is older than 10 days. Please review and consider creating a PR, merging, or deleting this branch."
              else
                message="Unable to determine the status of branch $branch. Please review this branch manually."
              fi
              notifications+=("$owner_email|$owner_name|$message")
              echo "DEBUG: Notification added for branch $branch"
            else
              echo "DEBUG: No notification needed for branch $branch"
            fi
          done < all_branches.txt
          
          echo "DEBUG: Total notifications: ${#notifications[@]}"
          echo "notifications<<EOF" >> $GITHUB_OUTPUT
          printf '%s\n' "${notifications[@]}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send notifications
        env:
          # Add your notification service credentials here
          OUTLOOK_CREDENTIALS: ${{ secrets.OUTLOOK_CREDENTIALS }}
          SYMPHONY_CREDENTIALS: ${{ secrets.SYMPHONY_CREDENTIALS }}
          TEAMS_CREDENTIALS: ${{ secrets.TEAMS_CREDENTIALS }}
        run: |
          # Function to send notification based on user's preferred channel
          send_notification() {
            local owner_email="$1"
            local owner_name="$2"
            local message="$3"
          
            local channel=$(get_user_preferred_channel "$owner_email")
          
            case "$channel" in
              "outlook")
                send_outlook_email "$owner_email" "$owner_name" "$message"
                ;;
              "symphony")
                send_symphony_message "$owner_email" "$owner_name" "$message"
                ;;
              "teams")
                send_teams_message "$owner_email" "$owner_name" "$message"
                ;;
              *)
                echo "Unknown notification channel for $owner_email"
                ;;
            esac
          }

          # Placeholder functions for different notification channels
          send_outlook_email() {
            echo "DEBUG: Sending Outlook email to $1 ($2): $3"
            # Implement your Outlook email sending logic here
          }

          send_symphony_message() {
            echo "DEBUG: Sending Symphony message to $1 ($2): $3"
            # Implement your Symphony messaging logic here
          }

          send_teams_message() {
            echo "DEBUG: Sending Microsoft Teams message to $1 ($2): $3"
            # Implement your Microsoft Teams messaging logic here
          }

          get_user_preferred_channel() {
            # Placeholder function to determine user's preferred channel
            echo "outlook"  # Default to Outlook for this example
          }

          # Process and send notifications
          echo "DEBUG: Starting to process notifications"
          while IFS= read -r notification; do
            echo "DEBUG: Processing notification: $notification"
            IFS='|' read -r owner_email owner_name message <<< "$notification"
            echo "DEBUG: Processing notification for $owner_name (email safely extracted)"
            send_notification "$owner_email" "$owner_name" "$message"
          done <<EOF
          ${{ steps.prepare_notifications.outputs.notifications }}
          EOF
          echo "DEBUG: Finished processing notifications"